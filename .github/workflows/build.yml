name: CI / CD Action

on:
  release:
    types: [published]

jobs:
  build:
    name: Build images
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Docker login
        env:
          DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USER }}
          DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
        run: |
          docker login -u ${DOCKERHUB_USER} -p ${DOCKERHUB_PASSWORD}

      - name: Build docker image
        run: |
          cd ${GITHUB_WORKSPACE}
          export TAG=`echo ${GITHUB_REF} | awk -F/ '{print $3}'`
          TAG=${TAG:-latest} docker-compose build

      - name: Push docker image
        run: |
          cd ${GITHUB_WORKSPACE}
          export TAG=`echo ${GITHUB_REF} | awk -F/ '{print $3}'`
          TAG=${TAG:-latest} docker-compose push

  deploy:
    name: Deploy application
    needs:
      - build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Prepare ssh-key
        env:
          SSH_KEY_PRIVATE: ${{ secrets.SSH_KEY_PRIVATE }}
          SSH_KEY_PUBLIC: ${{ secrets.SSH_KEY_PUBLIC }}
        run: |
          echo "${SSH_KEY_PRIVATE}" > ${HOME}/.ssh-key
          echo "${SSH_KEY_PUBLIC}" > ${HOME}/.ssh-key.pub
          chmod 600 ${HOME}/.ssh-key ${HOME}/.ssh-key.pub

      - name: Copy deployment files
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
        run: |
          cd ${GITHUB_WORKSPACE}
          scp -o "StrictHostKeyChecking no" -i ${HOME}/.ssh-key docker-compose.yml "${SSH_USER}@${DEPLOY_HOST}:"

      - name: Deploy stack
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
          DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USER }}
          DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
        run: |
          cd ${GITHUB_WORKSPACE}
          ssh -o "StrictHostKeyChecking no" -i ${HOME}/.ssh-key "${SSH_USER}@${DEPLOY_HOST}" <<EOF
            docker login -u "${DOCKERHUB_USER}" -p "${DOCKERHUB_PASSWORD}"
            docker stack deploy -c docker-compose.yml --prune --with-registry-auth actions_test
            rm docker-compose.yml
          EOF
